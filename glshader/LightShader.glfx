////GLOBAL
#version 330

////DEFINES

#include "Helpers.fxh"

////VERTEX

out int instanceID;
layout(std140) uniform matrixBlock { mat4 matWorldViewProj[eyes];};

////GEOMETRY
#extension GL_ARB_viewport_array : enable
layout(triangles) in;
layout(triangle_strip, max_vertices = 3) out;
in int instanceID[];

////FRAGMENT

uniform float4 lightColor_intensity;
uniform float4 lightColor2_falloff_power;
uniform float4 lightCenter_maxRange;
uniform float blend_modulate_vs_add;

out vec4 color;

////vs_lightbulb_main

in vec3 vPosition;
in vec2 tc;

out vec3 tablePos_gs;

void main()									   
{
   instanceID = gl_InstanceID;
   gl_Position = (matWorldViewProj[gl_InstanceID] * vec4(vPosition,1.0));
   gl_Position.z = max(gl_Position.z, 0.00001); // clamp lights to near clip plane to avoid them being partially clipped
   tablePos_gs = vPosition.xyz;
}

////PS_BulbLight

in vec3 tablePos;

void main()
{
	float len = length(lightCenter_maxRange.xyz - tablePos) * lightCenter_maxRange.w;
    float atten = pow(1.0 - saturate(len), lightColor2_falloff_power.w);
	float3 lcolor = lerp(lightColor2_falloff_power.xyz, lightColor_intensity.xyz, sqrt(len));
	float4 result;
	color.xyz = lcolor*(-blend_modulate_vs_add*atten*lightColor_intensity.w); // negative as it will be blended with '1.0-thisvalue' (the 1.0 is needed to modulate the underlying elements correctly, but not wanted for the term below)
	color.a = 1.0/blend_modulate_vs_add - 1.0; //saturate(atten*lightColor_intensity.w);
}

////gs_lightbulb_main

//Custom
in vec3 tablePos_gs[];
out vec3 tablePos;

void main()
{
    gl_ViewportIndex = instanceID[0];
	for (int i=0;i<3;i++) {
		//Default
		gl_Position = gl_in[i].gl_Position;
		//Custom
		tablePos = tablePos_gs[i];
		//Default
		EmitVertex();
	}
    EndPrimitive();
}

////TECHNIQUES

bulb_light:P0:vs_lightbulb_main():gs_lightbulb_main():PS_BulbLight()
