////GLOBAL
#version 330

#define NUM_BALL_LIGHTS 8

#include "Helpers.fxh"

uniform mat4 matView;
uniform mat4 orientation;
uniform mat4 matWorldViewInverse;
uniform mat4 matWorldView;

uniform mat3x4 matWorldViewInverseTranspose;

////VERTEX

// transformation matrices
uniform mat4 matWorldViewProj;
//mat4 matViewInverseInverseTranspose; // matView used instead and multiplied from other side

////FRAGMENT

uniform sampler2D Texture0; // base texture
uniform sampler2D Texture1; // envmap
uniform sampler2D Texture2; // envmap radiance
uniform sampler2D Texture3; // bulb light buffer


uniform bool hdrEnvTextures;// = false;

#include "Material.fxh"

uniform vec4  invTableRes_playfield_height_reflection;

//float    reflection_ball_playfield;


bool     hdrTexture0;

out vec4 color;

////vsBall

in vec3 vPosition;
in vec3 vNormal;
in vec2 tex0;

out vec4 normal_t0x;
out vec4 worldPos_t0y;

void main()
{
	// apply spinning and move the ball to it's actual position
	vec4 pos = vec4(vPosition, 1.0);
	pos.xyz = mul(pos, orientation).xyz;
	
	// apply spinning to the normals too to get the sphere mapping effect
	vec3 nspin = mul_w0(vec4(vNormal,0.0), orientation).xyz;
	vec3 normal = normalize(mul(matWorldViewInverse, vec4(nspin,0.0)).xyz); // actually: mul(vec4(nspin,0.), matWorldViewInverseTranspose), but optimized to save one matrix

	vec3 p = mul_w1(pos.xyz, matWorldView);

	gl_Position = mul(pos, matWorldViewProj);
	normal_t0x = vec4(normal,tex0.x);
	worldPos_t0y = vec4(p,tex0.y);
}

#if 0
voutReflection vsBallReflection( in vin IN )
{
	// apply spinning and move the ball to it's actual position
	vec4 pos = position;
	pos.xyz = mul_w1(pos.xyz, orientation);

	// this is not a 100% ball reflection on the table due to the quirky camera setup
	// the ball is moved a bit down and rendered again
	pos.y += position_radius.w*(2.0*0.35);
	pos.z = pos.z*0.5 - 10.0;

	vec3 p = mul_w1(pos.xyz, matWorldView);

    vec3 nspin = mul_w0(normal, orientation);
	vec3 normal = normalize(mul(matWorldViewInverse, nspin).xyz); // actually: mul(vec4(nspin,0.), matWorldViewInverseTranspose), but optimized to save one matrix

    vec3 r = reflect(normalize(/*camera=0,0,0,1*/-p), normal);

	voutReflection OUT;
	OUT.position = mul(pos, matWorldViewProj);
	OUT.tex0	 = pos.xy;
    OUT.r		 = r;
	return OUT;
}
#endif

////vsBallTrail

in vec3 vPosition;
in vec3 vNormal;
in vec2 tex0;

out vec3 tex0_alpha;

void main()
{
    gl_Position = mul(vec4(vPosition, 1.0), matWorldViewProj);
	tex0_alpha = vec3(tex0, vNormal.x); //!! abuses normal for now
}

////FRAGMENT

vec3 ballLightLoop(vec3 pos, vec3 N, vec3 V, vec3 diffuse, vec3 glossy, vec3 specular, float edge, bool is_metal)
{
   // normalize input vectors for BRDF evals
   N = normalize(N);
   V = normalize(V);
   
   // normalize BRDF layer inputs //!! use diffuse = (1-glossy)*diffuse instead?
   float diffuseMax = max(diffuse.x,max(diffuse.y,diffuse.z));
   float glossyMax = max(glossy.x,max(glossy.y,glossy.z));
   float specularMax = max(specular.x,max(specular.y,specular.z)); //!! not needed as 2nd layer only so far
   float sum = diffuseMax + glossyMax; //+ specularMax
   if(sum > 1.0)
   {
      float invsum = 1.0/sum;
      diffuse  *= invsum;
      glossy   *= invsum;
      //specular *= invsum;
   }

   //if(dot(N,V) < 0.0) //!! flip normal in case of wrong orientation? (backside lighting)
   //   N = -N;

   vec3 color = vec3(0.0, 0.0, 0.0);
      
   if((!is_metal && (diffuseMax > 0.0)) || (glossyMax > 0.0))
   {
      for(int i = 0; i < iLightPointBallsNum; i++)  
         color += DoPointLight(pos, N, V, diffuse, glossy, edge, Roughness_WrapL_Edge_Thickness.x, i, is_metal); // no clearcoat needed as only pointlights so far
   }

   if(!is_metal && (diffuseMax > 0.0))
      color += DoEnvmapDiffuse(normalize(mul(matView, vec4(N,0.0)).xyz), diffuse); // trafo back to world for lookup into world space envmap // actually: mul(vec4(N, 0.0), matViewInverseInverseTranspose)

   if(specularMax > 0.0)
      color += specular; //!! blend? //!! Fresnel with 1st layer?
  
   return color;
}


////psBall

in vec4 normal_t0x;
in vec4 worldPos_t0y;

void main()
{
    vec3 v = normalize(/*camera=0,0,0,1*/-worldPos_t0y.xyz);
    vec3 r = reflect(v, normalize(normal_t0x.xyz));
    // calculate the intermediate value for the final texture coords. found here http://www.ozone3d.net/tutorials/glsl_texturing_p04.php
	float  m = (r.z + 1.0 > 0.) ? 0.3535533905932737622 * rsqrt(r.z + 1.0) : 0.; // 0.353...=0.5/sqrt(2)
    float edge = dot(v, r);
    float lod = (edge > 0.6) ? // edge falloff to reduce aliasing on edges (picks smaller mipmap -> more blur)
		edge*(6.0*1.0/0.4)-(6.0*0.6/0.4) :
		0.0;

    vec2 uv0 = %PARAM0% ? vec2(r.y*-m + 0.5, r.x*-m + 0.5) : vec2(r.x*-m + 0.5, r.y*m + 0.5);
    vec3 ballImageColor = textureLod(Texture0, uv0, lod).xyz;
    if (!hdrTexture0)
        ballImageColor = InvGamma(ballImageColor);

	vec4 decalColorT = tex2D(Texture3, vec2(normal_t0x.w,worldPos_t0y.w));
	vec3 decalColor = InvGamma(decalColorT.xyz);
	if ( !%PARAM1% )
	{
	   // decal texture is an alpha scratch texture and must be added to the ball texture
	   // the strength of the scratches totally rely on the alpha values.
	   decalColor *= decalColorT.a;
	   ballImageColor = (ballImageColor+decalColor) * fenvEmissionScale_TexWidth.x;
	}
	else
	   ballImageColor = ScreenHDR( ballImageColor, decalColor ) * (0.5*fenvEmissionScale_TexWidth.x); //!! 0.5=magic
	
	vec3 playfield_normal = mul(matWorldViewInverse, vec4(0.,0.,1.,0.0)).xyz; // actually: mul(vec4(0.,0.,1.,0.), matWorldViewInverseTranspose), but optimized to save one matrix
	float NdotR = dot(playfield_normal,r);
	
	vec3 playfieldColor;
	if(/*(reflection_ball_playfield > 0.0) &&*/ (NdotR > 0.0))
	{
       vec3 playfield_p0 = mul_w1(vec3(/*playfield_pos=*/0.,0.,invTableRes_playfield_height_reflection.z), matWorldView);
       float t = dot(playfield_normal, worldPos_t0y.xyz - playfield_p0) / NdotR;
       vec3 playfield_hit = worldPos_t0y.xyz - t*r;

       vec2 uv = mul_w1(playfield_hit, matWorldViewInverse).xy * invTableRes_playfield_height_reflection.xy;
	   playfieldColor = (t < 0.) ? vec3(0., 0., 0.) // happens for example when inside kicker
                                 : InvGamma(textureLod(Texture1, uv,  0.).xyz)*invTableRes_playfield_height_reflection.w; //!! rather use screen space sample from previous frame??

       //!! hack to get some lighting on sample, but only diffuse, the rest is not setup correctly anyhow
       playfieldColor = lightLoop(playfield_hit, playfield_normal, -r, playfieldColor, vec3(0.,0.,0.), vec3(0.,0.,0.), 1.0, true, false);

	   //!! magic falloff & weight the rest in from the ballImage
	   float weight = NdotR*NdotR;
	   playfieldColor *= weight;
	   playfieldColor += ballImageColor*(1.0-weight);
	}
	else
	   playfieldColor = ballImageColor;

	vec3 diffuse = cBase_Alpha.xyz*0.075;
	if(!%PARAM1%)
	    diffuse *= decalColor; // scratches make the material more rough
    vec3 glossy = max(diffuse*2.0, vec3(0.1,0.1,0.1)); //!! meh
    vec3 specular = playfieldColor*cBase_Alpha.xyz; //!! meh, too, as only added in ballLightLoop anyhow
	if(!%PARAM1%)
	    specular *= vec3(1.,1.,1.)-decalColor; // see above

	color.xyz = ballLightLoop(worldPos_t0y.xyz, normal_t0x.xyz, /*camera=0,0,0,1*/-worldPos_t0y.xyz, diffuse, glossy, specular, 1.0, false);
	color.a = cBase_Alpha.a;
}

#if 0
vec4 psBallReflection( in voutReflection IN ) : COLOR
{
   vec2 envTex = /*cabMode*/false ? vec2(r.y*0.5f + 0.5f, -r.x*0.5f + 0.5f) : vec2(r.x*0.5f + 0.5f, r.y*0.5f + 0.5f);
   vec3 ballImageColor = texture(Texture0, envTex).xyz;
   if(!hdrTexture0)
      ballImageColor = InvGamma(ballImageColor);
   ballImageColor = (cBase_Alpha.xyz*(0.075*0.25) + ballImageColor)*fenvEmissionScale_TexWidth.x; //!! just add the ballcolor in, this is a whacky reflection anyhow
   float alpha = clamp((tex0.y - position_radius.y) / position_radius.w, 0.0, 1.0);
   alpha = (alpha*alpha)*(alpha*alpha)*reflection_ball_playfield;
   color = vec4(ballImageColor,alpha);
}
#endif

////psBallTrail

in vec3 tex0_alpha;

void main()
{
   vec3 ballImageColor = texture(Texture0, tex0_alpha.xy).xyz;
   if (!hdrTexture0)
      ballImageColor = InvGamma(ballImageColor);
   color = vec4((cBase_Alpha.xyz*(0.075*0.25) + ballImageColor)*fenvEmissionScale_TexWidth.x, tex0_alpha.z); //!! just add the ballcolor in, this is a whacky trail anyhow
}

//------------------------------------
// Techniques

////TECHNIQUES

RenderBall:P0:vsBall():psBall(false,false)
RenderBall_DecalMode:P0:vsBall():psBall(false, true)
RenderBall_CabMode:P0:vsBall():psBall(true,false)
RenderBall_CabMode_DecalMode:P0:vsBall():psBall(true,true)
//RenderBallReflection:P0:vsBallReflection():psBallReflection()
RenderBallTrail:P0:vsBallTrail():psBallTrail()
